#include <stdio.h>
#include <stdlib.h>

#define MAX(a, b) ((a) > (b) ? (a) : (b))

int constrainedSubsetSum(int* nums, int numsSize, int k) {
    int *dp = (int *)malloc(numsSize * sizeof(int));
    int *deque = (int *)malloc(numsSize * sizeof(int));  
    int front = 0, back = 0;  

    int maxSum = nums[0];
    
    for (int i = 0; i < numsSize; i++) {
        
        if (front < back && deque[front] < i - k) {
            front++;
        }

        
        dp[i] = nums[i] + (front < back ? MAX(0, dp[deque[front]]) : 0);
        maxSum = MAX(maxSum, dp[i]);

        
        while (front < back && dp[deque[back - 1]] <= dp[i]) {
            back--;  
        }
        deque[back++] = i;  
    }

    free(dp);
    free(deque);
    return maxSum;
}
